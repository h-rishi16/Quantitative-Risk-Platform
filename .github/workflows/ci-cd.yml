name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran libopenblas-dev liblapack-dev
    
    - name: Set environment variables to avoid build issues
      run: |
        echo "PIP_NO_BUILD_ISOLATION=False" >> $GITHUB_ENV
        echo "PIP_DISABLE_PIP_VERSION_CHECK=1" >> $GITHUB_ENV
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Upgrade pip and install build dependencies
      run: |
        python -m pip install --upgrade pip>=23.0
        python -m pip install --upgrade "setuptools>=68.0.0"
        python -m pip install --upgrade "wheel>=0.41.0"
        python -m pip install --upgrade build
    
    - name: Install mathematical libraries first (use pre-built wheels)
      run: |
        python -m pip install --only-binary=all "numpy>=1.24.0,<1.25.0"
        python -m pip install --only-binary=all "pandas>=2.1.0,<2.2.0" 
        python -m pip install --only-binary=all "scipy>=1.11.0,<1.12.0"
    
    - name: Install core dependencies
      run: |
        python -m pip install -r requirements.txt
    
    - name: Install development dependencies
      run: |
        python -m pip install --only-binary=all pytest==7.4.3
        python -m pip install --only-binary=all pytest-cov==4.1.0
        python -m pip install --only-binary=all pytest-asyncio==0.21.1
        python -m pip install --only-binary=all httpx==0.25.2
        python -m pip install --only-binary=all black==23.9.1
        python -m pip install --only-binary=all isort==5.12.0
        python -m pip install --only-binary=all flake8==6.0.0
        python -m pip install --only-binary=all bandit==1.7.5
        python -m pip install --only-binary=all safety==2.3.4
        python -m pip install --only-binary=all coverage==7.3.2
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Import sort check with isort
      run: |
        isort --check-only --diff --profile black .
    
    - name: Test with pytest
      run: |
        pytest --cov=backend --cov=frontend --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Security check with bandit
      run: |
        bandit -r backend/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Safety check
      run: |
        safety check
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  # Application Integration Test
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran libopenblas-dev liblapack-dev
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --only-binary=all -r requirements.txt
    
    - name: Start FastAPI backend
      run: |
        python -m uvicorn backend.app.main:app --host 0.0.0.0 --port 8002 &
        sleep 10
    
    - name: Test API health endpoint
      run: |
        curl -f http://localhost:8002/health || exit 1
    
    - name: Run all tests
      run: |
        pytest tests/ -v --tb=short
    
    - name: Check test directory structure
      run: |
        echo "=== Test directory structure ==="
        find tests/ -type f -name "*.py" | head -10
        echo "=== Integration directory contents ==="
        ls -la tests/integration/ || echo "Integration directory not found"
    
    - name: Run integration tests (NEW VERSION)
      run: |
        echo "=== DEBUGGING: Current directory ==="
        pwd
        echo "=== DEBUGGING: List all files ==="
        find . -name "test*.py" -type f
        echo "=== DEBUGGING: Check if integration dir exists ==="
        ls -la tests/ || echo "tests directory not found"
        ls -la tests/integration/ || echo "integration directory not found"
        echo "=== Running integration tests ==="
        if [ -d "tests/integration" ]; then
          echo "Found integration directory, running integration tests"
          pytest tests/integration/ -v
        else
          echo "Integration directory missing, running all tests with integration filter"
          pytest tests/ -k integration -v || echo "No integration tests found, running all tests"
          pytest tests/ -v || echo "No tests found at all"
        fi
    
    - name: Stop backend
      run: |
        pkill -f "uvicorn backend.app.main:app" || true

  # Deploy to staging (on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  # Deploy to production (on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security, integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here