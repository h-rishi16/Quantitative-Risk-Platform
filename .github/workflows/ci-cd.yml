name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gfortran libopenblas-dev liblapack-dev
    
    - name: Set environment variables to avoid build issues
      run: |
        echo "PIP_NO_BUILD_ISOLATION=False" >> $GITHUB_ENV
        echo "PIP_DISABLE_PIP_VERSION_CHECK=1" >> $GITHUB_ENV
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Upgrade pip and install build dependencies
      run: |
        python -m pip install --upgrade pip>=23.0
        python -m pip install --upgrade "setuptools>=68.0.0"
        python -m pip install --upgrade "wheel>=0.41.0"
        python -m pip install --upgrade build
    
    - name: Install mathematical libraries first (use pre-built wheels)
      run: |
        python -m pip install --only-binary=all "numpy>=1.24.0,<1.25.0"
        python -m pip install --only-binary=all "pandas>=2.1.0,<2.2.0" 
        python -m pip install --only-binary=all "scipy>=1.11.0,<1.12.0"
    
    - name: Install remaining core dependencies
      run: |
        python -m pip install --only-binary=all fastapi==0.104.1
        python -m pip install --only-binary=all streamlit==1.28.1
        python -m pip install --only-binary=all uvicorn==0.24.0
        python -m pip install --only-binary=all plotly==5.17.0
        python -m pip install --only-binary=all pydantic==2.5.0
        python -m pip install --only-binary=all python-multipart==0.0.6
        python -m pip install --only-binary=all python-dotenv==1.0.0
        python -m pip install --only-binary=all requests==2.31.0
        python -m pip install --only-binary=all aiofiles==23.2.1
    
    - name: Install development dependencies
      run: |
        python -m pip install --only-binary=all pytest==7.4.3
        python -m pip install --only-binary=all pytest-cov==4.1.0
        python -m pip install --only-binary=all pytest-asyncio==0.21.1
        python -m pip install --only-binary=all black==23.9.1
        python -m pip install --only-binary=all isort==5.12.0
        python -m pip install --only-binary=all flake8==6.0.0
        python -m pip install --only-binary=all mypy==1.6.1
        python -m pip install --only-binary=all bandit==1.7.5
        python -m pip install --only-binary=all safety==2.3.4
        python -m pip install --only-binary=all coverage==7.3.2
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Import sort check with isort
      run: |
        isort --check-only --diff .
    
    - name: Type check with mypy
      run: |
        mypy backend/ --ignore-missing-imports --no-strict-optional --allow-untyped-defs --disable-error-code=misc
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest --cov=backend --cov=frontend --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Security check with bandit
      run: |
        bandit -r backend/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Safety check
      run: |
        safety check
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  # Build and Test Docker Images
  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t risk-platform:test .
    
    - name: Test Docker image
      run: |
        # Start the container in background
        docker run -d --name risk-test -p 8002:8002 risk-platform:test
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8002/health || exit 1
        
        # Cleanup
        docker stop risk-test
        docker rm risk-test

  # Deploy to staging (on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  # Deploy to production (on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here