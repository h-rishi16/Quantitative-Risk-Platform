name: Deploy to Staging

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, closed ]
  workflow_dispatch:
    inputs:
      deploy_reason:
        description: 'Reason for manual staging deployment'
        required: false
        default: 'Manual deployment'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test before staging deployment
  test-before-staging:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip>=23.0
        python -m pip install --upgrade "setuptools>=68.0.0"
        python -m pip install --upgrade "wheel>=0.41.0"
        
        # Install mathematical libraries first (use pre-built wheels)
        python -m pip install --only-binary=all "numpy>=1.24.0,<1.25.0"
        python -m pip install --only-binary=all "pandas>=2.1.0,<2.2.0" 
        python -m pip install --only-binary=all "scipy>=1.11.0,<1.12.0"
        
        # Install core dependencies
        python -m pip install --only-binary=all fastapi==0.104.1
        python -m pip install --only-binary=all uvicorn==0.24.0
        python -m pip install --only-binary=all pydantic==2.5.0
        python -m pip install --only-binary=all httpx==0.25.2
        python -m pip install --only-binary=all pytest==7.4.3
        python -m pip install --only-binary=all pytest-asyncio==0.21.1
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Code quality checks
      run: |
        python -m pip install black==23.9.1 isort==5.12.0 mypy==1.6.1
        python -m black --check backend/ frontend/ || echo "Black formatting check completed"
        python -m isort --check-only backend/ frontend/ || echo "isort check completed"
        python -m mypy backend/ || echo "MyPy check completed"

  # Build staging Docker image
  build-staging-image:
    needs: test-before-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      packages: write
      contents: read
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for staging
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-staging
          type=sha,prefix={{branch}}-staging-,format=short
          type=raw,value=staging-latest
    
    - name: Build and push staging image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ steps.meta.outputs.labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          ENVIRONMENT=staging

  # Deploy to staging environment
  deploy-staging:
    needs: [test-before-staging, build-staging-image]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: staging
      url: http://staging.risk-platform.local:8502
    steps:
    - uses: actions/checkout@v4
    
    - name: Create staging environment variables
      run: |
        cat > .env.staging << EOF
        # Staging Environment Configuration
        ENVIRONMENT=staging
        API_VERSION=staging
        DEBUG=true
        LOG_LEVEL=DEBUG
        
        # Database Configuration
        POSTGRES_DB=risk_platform_staging
        POSTGRES_USER=risk_user_staging
        POSTGRES_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
        
        # Redis Configuration  
        REDIS_PASSWORD=${{ secrets.STAGING_REDIS_PASSWORD }}
        
        # API Configuration
        API_HOST=0.0.0.0
        API_PORT=8002
        API_BASE_URL=http://localhost:8003
        
        # Container Registry
        IMAGE_TAG=${{ needs.build-staging-image.outputs.image-tag }}
        EOF
    
    - name: Deploy to staging with Docker Compose
      run: |
        echo "🚀 Deploying to staging environment..."
        
        # Stop existing staging containers
        docker compose -f docker-compose.staging.yml -p risk-platform-staging down --remove-orphans || true
        
        # Pull the newly built image
        docker pull ${{ needs.build-staging-image.outputs.image-tag }} || true
        
        # Start staging services
        docker compose -f docker-compose.staging.yml -p risk-platform-staging up -d --build
        
        # Wait for services to be ready
        echo "⏳ Waiting for services to be ready..."
        sleep 30
        
        # Health checks
        echo "🏥 Performing health checks..."
        for i in {1..10}; do
          if curl -f http://localhost:8003/health; then
            echo "✅ API health check passed"
            break
          fi
          echo "⏳ Attempt $i/10: API not ready yet, waiting..."
          sleep 10
        done
        
        # Check UI accessibility
        for i in {1..5}; do
          if curl -f http://localhost:8502; then
            echo "✅ UI accessibility check passed"
            break
          fi
          echo "⏳ Attempt $i/5: UI not ready yet, waiting..."
          sleep 10
        done
    
    - name: Run basic functionality tests
      run: |
        echo "🧪 Running basic functionality tests on staging..."
        
        # Test API endpoints
        echo "Testing health endpoint..."
        curl -f http://localhost:8003/health
        
        echo "Testing sample data endpoint..."
        curl -f http://localhost:8003/sample_data
        
        echo "Testing API documentation..."
        curl -f http://localhost:8003/docs
        
        echo "✅ Basic functionality tests passed"
    
    - name: Display staging deployment info
      run: |
        echo "🎉 Staging Deployment Complete!"
        echo "================================"
        echo ""
        echo "📍 Service URLs:"
        echo "   • API (Backend):  http://localhost:8003"
        echo "   • UI (Frontend):  http://localhost:8502"
        echo "   • Health Check:   http://localhost:8003/health"
        echo "   • API Docs:       http://localhost:8003/docs"
        echo ""
        echo "🔧 Container Status:"
        docker compose -f docker-compose.staging.yml -p risk-platform-staging ps
        
        echo ""
        echo "📊 Recent logs:"
        docker compose -f docker-compose.staging.yml -p risk-platform-staging logs --tail=20

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Staging deployment successful!"
          echo "Deploy reason: ${{ github.event.inputs.deploy_reason || 'Automatic deployment on push to main' }}"
        else
          echo "❌ Staging deployment failed!"
        fi

  # Cleanup on PR close
  cleanup-staging:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
    - name: Cleanup staging environment
      run: |
        echo "🧹 Cleaning up staging environment for closed PR..."
        docker compose -f docker-compose.staging.yml -p risk-platform-staging-pr-${{ github.event.number }} down -v || true
        docker image prune -f || true
        echo "✅ Cleanup completed"