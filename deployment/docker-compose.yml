version: '3.8'

services:
  # Backend API Service
  backend:
    build: ..
    container_name: risk-platform-api
    ports:
      - "8002:8002"
    environment:
      - PYTHONPATH=/app
      - API_HOST=0.0.0.0
      - API_PORT=8002
    volumes:
      - ../sample_data:/app/sample_data:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - risk-platform

  # Frontend Streamlit Service  
  frontend:
    build: ..
    container_name: risk-platform-ui
    ports:
      - "8501:8501"
    environment:
      - PYTHONPATH=/app
      - API_BASE_URL=http://backend:8002
    command: >
      streamlit run frontend/app.py 
      --server.port=8501 
      --server.address=0.0.0.0
      --server.enableCORS=false
      --server.enableXsrfProtection=false
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./sample_data:/app/sample_data:ro
    restart: unless-stopped
    networks:
      - risk-platform

  # Redis Cache (Optional - for future enhancements)
  redis:
    image: redis:7-alpine
    container_name: risk-platform-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - risk-platform

  # PostgreSQL Database (Optional - for future enhancements)
  postgres:
    image: postgres:15-alpine
    container_name: risk-platform-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=risk_platform
      - POSTGRES_USER=risk_user
      - POSTGRES_PASSWORD=risk_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - risk-platform

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  risk-platform:
    driver: bridge
    name: risk-platform-network